/**
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

import { quad, literal, namedNode, blankNode } from "@rdfjs/dataset";
const DataFactory = { quad, literal, namedNode, blankNode };
import namespace from "@rdfjs/namespace";

/**
 Generated by artifact generator [@inrupt/lit-artifact-generator], version [0.10.29]
 as part of artifact: [vocab-common], version: [0.4.10]
 at 'Monday, July 6, 2020 10:43 AM'.

 Vocabulary built from vocab list file: [../lit-vocab/inrupt-rdf-vocab/Common/Vocab-List-Inrupt-Common.yml].

 The Inrupt test vocabulary - just commonly used terms
 across all Inrupt tests.
 */

const RDFJS_NAMESPACE = namespace("https://inrupt.com/vocab/test#");

const _NAMESPACE = "https://inrupt.com/vocab/test#";
function _NS(localName: string) {
  return _NAMESPACE + localName;
}

const INRUPT_TEST_IRI = {
  PREFIX: "inrupt_test_iri",
  NAMESPACE: _NAMESPACE,
  PREFIX_AND_NAMESPACE: {
    inrupt_test_iri: "https://inrupt.com/vocab/test/iri#",
  },
  NS: _NS,

  somePodRoot: DataFactory.namedNode("https://some.pod.com/"),
  somePodRootContainer: DataFactory.namedNode(
    "https://some.pod.com/rootContainer/"
  ),
  someOtherPodRootContainer: DataFactory.namedNode(
    "https://some.other.pod.com/canBeAnywhere/rootContainer/"
  ),

  somePodResource: DataFactory.namedNode(
    "https://some.pod.com/rootContainer/Resource1"
  ),

  // // ESS ACL convention (i.e. query params)
  // somePodRootAcl: DataFactory.namedNode("https://some.pod.com/?ext=acl"),
  // somePodRootContainerAcl: DataFactory.namedNode("https://some.pod.com/rootContainer/?ext=acl"),
  // somePodRootContainerAclRelativePath: "?ext=acl",
  // somePodResourceAclRelativePath: "Resource1?ext=acl",
  // somePodResourceAcl: DataFactory.namedNode("https://some.pod.com/rootContainer/Resource1?ext=acl"),

  // NSS ACL convention (i.e. filename extensions)
  somePodRootAcl: DataFactory.namedNode("https://some.pod.com/.acl"),
  somePodRootContainerAcl: DataFactory.namedNode(
    "https://some.pod.com/rootContainer/.acl"
  ),
  somePodRootContainerAclRelativePath: ".acl",
  somePodResourceAclRelativePath: "Resource1.acl",
  somePodResourceAcl: DataFactory.namedNode(
    "https://some.pod.com/rootContainer/Resource1.acl"
  ),

  somePodGroupId: DataFactory.namedNode("https://some.pod/group#id"),

  /**
   * Identifies the IRI of another generic Pod resource.
   */
  someOtherPodResource: DataFactory.namedNode(
    "https://some.other.pod.com/OtherResource"
  ),

  /**
   * An arbitrary RDF named graph.
   */
  arbitraryNamedGraph: DataFactory.namedNode(
    "https://some.pod.com/arbitraryNamedGraph"
  ),

  /**
   * An arbitrary WebID.
   */
  somePodWebId: DataFactory.namedNode(
    "https://some.pod.com/somePodWebId/profile/card#me"
  ),
  someOtherPodWebId: DataFactory.namedNode("https://some.other.pod.com#i"),

  /**
   * An arbitrary RDF subject.
   */
  arbitrarySubject: DataFactory.namedNode("https://some.pod/resource#subject"),

  /**
   * An arbitrary RDF predicate.
   */
  arbitraryPredicate: RDFJS_NAMESPACE("arbitraryPredicate"),

  /**
   * An arbitrary RDF object.
   */
  arbitraryObject: RDFJS_NAMESPACE("arbitraryObject"),

  /**
   * An arbitrary RDF subject.
   */
  arbitraryOtherSubject: DataFactory.namedNode(
    "https://some.other.pod/resource#other-subject"
  ),

  /**
   * An arbitrary RDF predicate.
   */
  arbitraryOtherPredicate: RDFJS_NAMESPACE("arbitraryOtherPredicate"),

  /**
   * An arbitrary RDF object.
   */
  arbitraryOtherObject: RDFJS_NAMESPACE("arbitraryOtherObject"),
};

export { INRUPT_TEST_IRI };
